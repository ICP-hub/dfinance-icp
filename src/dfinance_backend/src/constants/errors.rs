use candid::CandidType;

#[derive(Debug ,CandidType)]
#[derive(Clone)]
pub enum Error {
    MaxAmountPlatform,
    InvalidAmount,
    RewardIsHigher,
    InvalidCanister,
    InvalidPrincipal,
    AnonymousPrincipal,
    MaxAmount,
    ReserveInactive,
    ReservePaused,
    ReserveFrozen,
    SupplyCapExceeded,
    LTVGreaterThanThreshold,
    BorrowCapExceeded,
    HealthFactorLess,
    WithdrawMoreThanSupply,
    RepayMoreThanDebt,
    InvalidUser,
    InvalidUserId,
    LessRewardAmount,
    UnauthorizedAccess,
    UserNotFound,
    BorrowingNotEnabled,
    NoDebtToRepay,
    NoCanisterIdFound,
    ConversionErrorToU128,
    ExchangeRateError,
    ErrorMintTokens,
    ErrorBurnTokens,
    ErrorBurnDTokens,
    ErrorMintDTokens,
    ErrorBurnDebtTokens,
    ErrorMintDebtTokens,
    ConversionErrorFromTextToPrincipal,
    NoReserveDataFound,
    CalculateUserAccountDataError,
    ErrorPriceCache,
    NoPriceCache,
    EmptyAsset,
    LowWalletBalance,
    AmountTooMuch,
    InvalidAssetLength,
    NoUserReserveDataFound,
    InvalidBurnAmount,
    InvalidMintAmount,
    ErrorParsingPrincipal,
    NormalizedSupply,
    NormalizedDebt,
    ErrorGetBalance,
    ErrorFaucetTokens,
    ErrorInterestRate,
    NotFoundAssetPrincipal,
    ErrorEncoding,
    ErrorRawResponse,
    ErrorDecoding,
    LockAcquisitionFailed,
    InsufficientLiquidity,
    ErrorRollBack,
    EmailError,
    ErrorNotController,
    InvalidVariableName,
    TokenAlreadyExist,
    FailedToReleaseLock,
    LockOperationInProgess,
    ErrorDTokenBalanceLessThan,
    AmountSubtractionError
}

impl Error {
    pub fn message(&self) -> &str {
        match self {
            Error::MaxAmountPlatform => "Platform is unable to pay right now! Try Again Later",
            Error::InvalidAmount => "Amount must be greater than 0",
            Error::InvalidCanister => "Invalid canister id",
            Error::RewardIsHigher => "Reward is higher than expected",
            Error::InvalidPrincipal => "Invalid principal id",
            Error::AnonymousPrincipal => "Anonymous principals are not allowed",
            Error::MaxAmount => "Amount must be less than user available balance",
            Error::ReserveInactive => "Action requires an active reserve",
            Error::ReservePaused => "Action cannot be performed because the reserve is paused",
            Error::ReserveFrozen => "Action cannot be performed because the reserve is frozen",
            Error::SupplyCapExceeded => "Supply cap is exceeded",
            Error::BorrowCapExceeded => "Borrow cap is exceeded",
            Error::LTVGreaterThanThreshold => "LTV should be less than Liquidation Threshold",
            Error::HealthFactorLess => "Health factor is falling below 1, will lead to liquidation",
            Error::WithdrawMoreThanSupply => "Withdraw cannot be more than supply",
            Error::RepayMoreThanDebt => "Repay cannot be more than debt",
            Error::InvalidUser => "User is not equal to the caller",
            Error::InvalidUserId => "Invalid user id",
            Error::LessRewardAmount => "Total collateral value cannot be less than reward amount",
            Error::UnauthorizedAccess => "unauthorized access denied",
            Error::UserNotFound => "user not found",
            Error::BorrowingNotEnabled => "asset borrowing is not enabled",
            Error::NoDebtToRepay => "no debt to repay",
            Error::NoCanisterIdFound => "no canister id found",
            Error::ConversionErrorToU128 => "Error converting balance to u128",
            Error::ExchangeRateError => "Error getting in exchange rate",
            Error::ErrorMintTokens => "Errors in minting the tokens",
            Error::ErrorBurnTokens => "Errors in Burning the tokens",
            Error::ErrorBurnDTokens => "Asset transfer failed, burned dtoken.",
            Error::ErrorMintDTokens => "Asset transfer failed, mint dtoken.",
            Error::ErrorBurnDebtTokens => "Asset transfer failed, burned debttoken.",
            Error::ErrorMintDebtTokens => "Asset transfer failed, mint debttoken.",
            Error::ConversionErrorFromTextToPrincipal => "conversion error from text to principal",
            Error::NoReserveDataFound => "no reserve data found of the given asset",
            Error::NoUserReserveDataFound => "user reserves data not found",
            Error::CalculateUserAccountDataError => "Failed to calculate user account data",
            Error::NoPriceCache => "No price cache found",
            Error::ErrorPriceCache => "Error in fetching price cache",
            Error::EmptyAsset => "Asset cannot be an empty string",
            Error::LowWalletBalance => "wallet balance is low",
            Error::AmountTooMuch => "Amount is too much",
            Error::InvalidAssetLength => "Lenght of the asset is invalid",
            Error::InvalidBurnAmount => "Invalid burn amount",
            Error::InvalidMintAmount => "Invalid mint amount",
            Error::ErrorParsingPrincipal => "Failed to parse Principal",
            Error::NormalizedSupply => "Error from the normalized supply function",
            Error::NormalizedDebt => "Error from the normalized debt function",
            Error::ErrorGetBalance => "Getting error in get balance function",
            Error::ErrorFaucetTokens => "Error in faucet tokens",
            Error::ErrorInterestRate => "Error in calculating interest rate",
            Error::NotFoundAssetPrincipal => "No principal found for asset",
            Error::ErrorEncoding => "Error encoding arguments",
            Error::ErrorRawResponse => "Error in raw response",
            Error::ErrorDecoding => "Error decoding response",
            Error::LockAcquisitionFailed => "Failed to acquire lock",
            Error::InsufficientLiquidity => "Insufficient liquidity",
            Error::ErrorRollBack => "Error while rollback",
            Error::EmailError => "Error in sending email to the admin",
            Error::ErrorNotController => "you are not a controller",
            Error::InvalidVariableName => "name of the variable is invalid - please enter it again",
            Error::TokenAlreadyExist => "Token already exist - try again with different token",
            Error::FailedToReleaseLock => "Failed to release lock",
            Error::LockOperationInProgess => "Another operation is already in progress for user",
            Error::ErrorDTokenBalanceLessThan => "d token balance is less than the adjusted balance",
            Error::AmountSubtractionError => "The current locked amount is less than the amount you are trying to subtract"
        }
    }
}