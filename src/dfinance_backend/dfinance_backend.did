type ReserveConfiguration = record {
  ltv : nat16;
  liquidation_protocol_fee : nat16;
  active : bool;
  supply_cap : nat64;
  borrow_cap : nat64;
  borrowing_enabled : bool;
  frozen : bool;
  total_supplies : float64;
  liquidation_bonus : nat16;
  liquidation_threshold : nat16;
  total_borrowed : float64;
  paused : bool;
};
type ReserveData = record {
  id : nat16;
  asset_name : opt text;
  can_be_collateral : opt bool;
  debt_token_canister : opt text;
  last_update_timestamp : nat64;
  liquidity_index : nat;
  d_token_canister : opt text;
  current_liquidity_rate : nat;
  borrow_rate : float64;
  supply_rate_apr : opt float64;
  configuration : ReserveConfiguration;
  debt_index : float64;
  total_supply : opt float64;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : principal; Err : text };
type Result_3 = variant { Ok : record { float64; nat64 }; Err : text };
type Result_4 = variant { Ok : ReserveData; Err : text };
type Result_5 = variant { Ok : UserData; Err : text };
type UserData = record {
  ltv : opt float64;
  available_borrow : opt float64;
  net_apy : opt float64;
  reserves : opt vec record { text; UserReserveData };
  health_factor : opt float64;
  total_collateral : opt float64;
  total_debt : opt float64;
  user_id : opt text;
  liquidation_threshold : opt float64;
  net_worth : opt float64;
};
type UserReserveData = record {
  asset_price_when_supplied : float64;
  principal_stable_debt : nat64;
  asset_borrow : float64;
  total_variable_debt : nat64;
  last_update_timestamp : nat64;
  asset_price_when_borrowed : float64;
  liquidity_index : float64;
  variable_borrow_index : float64;
  reserve : text;
  asset_supply : float64;
  total_stable_debt : nat64;
  avg_stable_borrow_rate : float64;
};
service : () -> {
  borrow : (text, nat64) -> (Result);
  check_user : (text) -> (Result_1);
  create_multiple_canisters : () -> (vec principal);
  get_all_assets : () -> (vec text) query;
  get_all_users : () -> (vec record { principal; UserData }) query;
  get_asset_principal : (text) -> (Result_2) query;
  get_exchange_rates : (text) -> (Result_3);
  get_reserve_data : (text) -> (Result_4) query;
  get_user_data : (text) -> (Result_5) query;
  initialize_reserve : () -> ();
  liquidation_call : (text, text, nat64, text) -> (Result);
  repay : (text, nat, opt text) -> (Result);
  supply : (text, nat64, bool) -> (Result);
  withdraw : (text, nat, opt text, bool) -> (Result);
}
