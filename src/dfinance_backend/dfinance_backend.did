type CachedPrice = record { price : nat };
type Error = variant {
  NormalizedSupply;
  ConversionErrorToU128;
  NoDebtToRepay;
  NoCanisterIdFound;
  ErrorBurnDebtTokens;
  SupplyCapExceeded;
  ErrorDecoding;
  InvalidAmount;
  ErrorInterestRate;
  AmountTooMuch;
  ErrorMintDebtTokens;
  NoUserReserveDataFound;
  ErrorGetBalance;
  ExchangeRateError;
  ErrorMintDTokens;
  ErrorFaucetTokens;
  InvalidAssetLength;
  InvalidCanister;
  LTVGreaterThanThreshold;
  ReserveInactive;
  WithdrawMoreThanSupply;
  ErrorMintTokens;
  BorrowingNotEnabled;
  InvalidPrincipal;
  NoReserveDataFound;
  LowWalletBalance;
  InvalidBurnAmount;
  InvalidUserId;
  ErrorPriceCache;
  InvalidUser;
  EmptyAsset;
  MaxAmount;
  ErrorParsingPrincipal;
  ReserveFrozen;
  LessRewardAmount;
  ErrorBurnDTokens;
  NoPriceCache;
  ConversionErrorFromTextToPrincipal;
  NotFoundAssetPrincipal;
  BorrowCapExceeded;
  ErrorEncoding;
  HealthFactorLess;
  UnauthorizedAccess;
  ReservePaused;
  ErrorBurnTokens;
  RepayMoreThanDebt;
  InvalidMintAmount;
  ErrorRawResponse;
  UserNotFound;
  CalculateUserAccountDataError;
  NormalizedDebt;
};
type ExecuteBorrowParams = record { asset : text; amount : nat };
type ExecuteRepayParams = record {
  asset : text;
  on_behalf_of : opt principal;
  amount : nat;
};
type ExecuteSupplyParams = record {
  asset : text;
  is_collateral : bool;
  amount : nat;
};
type ExecuteWithdrawParams = record {
  asset : text;
  is_collateral : bool;
  on_behalf_of : opt principal;
  amount : nat;
};
type PriceCache = record { cache : vec record { text; CachedPrice } };
type ReserveConfiguration = record {
  ltv : nat;
  liquidation_protocol_fee : nat;
  active : bool;
  supply_cap : nat;
  borrow_cap : nat;
  reserve_factor : nat;
  borrowing_enabled : bool;
  frozen : bool;
  liquidation_bonus : nat;
  liquidation_threshold : nat;
  paused : bool;
};
type ReserveData = record {
  id : nat16;
  asset_name : opt text;
  userlist : opt vec record { text; bool };
  asset_borrow : nat;
  can_be_collateral : opt bool;
  debt_token_canister : opt text;
  last_update_timestamp : nat64;
  liquidity_index : nat;
  d_token_canister : opt text;
  asset_supply : nat;
  current_liquidity_rate : nat;
  borrow_rate : nat;
  configuration : ReserveConfiguration;
  accure_to_platform : nat;
  debt_index : nat;
  total_borrowed : nat;
  total_supply : nat;
};
type Result = variant { Ok : nat; Err : Error };
type Result_1 = variant { Ok : principal; Err : Error };
type Result_2 = variant { Ok : PriceCache; Err : Error };
type Result_3 = variant { Ok : record { nat; nat64 }; Err : Error };
type Result_4 = variant { Ok : ReserveData; Err : Error };
type Result_5 = variant {
  Ok : record { nat; nat; nat; nat; nat; nat; bool };
  Err : Error;
};
type Result_6 = variant { Ok : UserData; Err : Error };
type Result_7 = variant { Ok : text; Err : Error };
type Result_8 = variant { Ok; Err : Error };
type Result_9 = variant { Ok : record { nat; nat }; Err : Error };
type UserData = record {
  ltv : opt nat;
  available_borrow : opt nat;
  net_apy : opt nat;
  reserves : opt vec record { text; UserReserveData };
  health_factor : opt nat;
  total_collateral : opt nat;
  total_debt : opt nat;
  user_id : opt text;
  liquidation_threshold : opt nat;
  max_ltv : opt nat;
  net_worth : opt nat;
};
type UserReserveData = record {
  supply_rate : nat;
  asset_price_when_supplied : nat;
  principal_stable_debt : nat64;
  asset_borrow : nat;
  last_update_timestamp : nat64;
  d_token_balance : nat;
  is_collateral : bool;
  asset_price_when_borrowed : nat;
  liquidity_index : nat;
  faucet_limit : nat;
  variable_borrow_index : nat;
  reserve : text;
  asset_supply : nat;
  state : UserState;
  faucet_usage : nat;
  borrow_rate : nat;
  debt_token_blance : nat;
  is_using_as_collateral_or_borrow : bool;
  is_borrowed : bool;
};
type UserState = record { adjusted_balance : nat; index : nat };
service : () -> {
  create_multiple_canisters : () -> (vec principal);
  execute_borrow : (ExecuteBorrowParams) -> (Result);
  execute_liquidation : (text, text, nat, principal) -> (Result);
  execute_repay : (ExecuteRepayParams) -> (Result);
  execute_supply : (ExecuteSupplyParams) -> (Result);
  execute_withdraw : (ExecuteWithdrawParams) -> (Result);
  faucet : (text, nat) -> (Result);
  get_all_assets : () -> (vec text) query;
  get_all_users : () -> (vec record { principal; UserData }) query;
  get_asset_debt : (text, opt principal) -> (Result) query;
  get_asset_principal : (text) -> (Result_1) query;
  get_asset_supply : (text, opt principal) -> (Result) query;
  get_balance : (principal, principal) -> (Result) query;
  get_cached_exchange_rate : (text) -> (Result_2) query;
  get_exchange_rates : (text, opt text, nat) -> (Result_3);
  get_reserve_data : (text) -> (Result_4) query;
  get_total_supply : (principal) -> (Result) query;
  get_user_account_data : (opt principal) -> (Result_5) query;
  get_user_data : (principal) -> (Result_6) query;
  initialize_canister : () -> ();
  initialize_reserve : () -> ();
  queary_reserve_price : () -> (vec PriceCache) query;
  register_user : () -> (Result_7);
  toggle_collateral : (text, nat, nat) -> (Result_8);
  update_reserves_price : () -> (Result_8);
  user_position : (text) -> (Result_9) query;
}
