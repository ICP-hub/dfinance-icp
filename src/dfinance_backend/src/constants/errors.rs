#[derive(Debug)]
pub enum Error {
    InvalidAmount,
    MaxAmount,
    ReserveInactive,
    ReservePaused,
    ReserveFrozen,
    SupplyCapExceeded,
    LTVGreaterThanThreshold,
    BorrowCapExceeded,
    HealthFactorLess,
    WithdrawMoreThanSupply,
    RepayMoreThanDebt,
    InvalidUser,
    LessRewardAmount,
    UnauthorizedAccess,
    UserNotFound,
    BorrowingNotEnabled,
    NoDebtToRepay,
    NoCanisterIdFound,
    ConversionErrorToU128,
    ExchangeRateError,
    ErrorBurnDTokens,
    ErrorMintDTokens,
    ErrorBurnDebtTokens,
    ErrorMintDebtTokens,
    ConversionErrorFromTextToPrincipal,
    NoReserveDataFound,
    CalculateUserAccountDataError,
    ErrorPriceCache
}

impl Error {
    pub fn message(&self) -> &str {
        match self {
            Error::InvalidAmount => "Amount must be greater than 0",
            Error::MaxAmount => "Amount must be less than user balance",
            Error::ReserveInactive => "Action requires an active reserve",
            Error::ReservePaused => "Action cannot be performed because the reserve is paused",
            Error::ReserveFrozen => "Action cannot be performed because the reserve is frozen",
            Error::SupplyCapExceeded => "Supply cap is exceeded",
            Error::BorrowCapExceeded => "Borrow cap is exceeded",
            Error::LTVGreaterThanThreshold => "LTV should be less than Liquidation Threshold",
            Error::HealthFactorLess => "Health factor is falling below 1, will lead to liquidation",
            Error::WithdrawMoreThanSupply => "Withdraw cannot be more than supply",
            Error::RepayMoreThanDebt => "Repay cannot be more than debt",
            Error::InvalidUser => "User is not equal to the caller",
            Error::LessRewardAmount => "Total collateral value cannot be less than reward amount",
            Error::UnauthorizedAccess => "unauthorized access denied",
            Error::UserNotFound => "user not found",
            Error::BorrowingNotEnabled => "asset borrowing is not enabled",
            Error::NoDebtToRepay => "no debt to repay",
            Error::NoCanisterIdFound => "no canister id found",
            Error::ConversionErrorToU128 => "Error converting balance to u128",
            Error::ExchangeRateError => "Error getting in exchange rate",
            Error::ErrorBurnDTokens => "Asset transfer failed, burned dtoken.",
            Error::ErrorMintDTokens => "Asset transfer failed, mint dtoken.",
            Error::ErrorBurnDebtTokens => "Asset transfer failed, burned debttoken.",
            Error::ErrorMintDebtTokens => "Asset transfer failed, mint debttoken.",
            Error::ConversionErrorFromTextToPrincipal => "conversion error from text to principal",
            Error::NoReserveDataFound => "no reserve data found of the given asset",
            Error::CalculateUserAccountDataError => "Failed to calculate user account data",
            Error::ErrorPriceCache => "Error in fetching price cache",
        }
    }
}