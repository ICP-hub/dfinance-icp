
type ReserveData = record {
  asset_name : opt text;
  id : nat16;
  debt_token_canister : opt text;
  last_update_timestamp : nat64;
  liquidity_index : nat;
  d_token_canister : opt text;
  current_liquidity_rate : nat;
  borrow_rate : opt float64;
  supply_rate_apr : opt float64;
  accrued_to_treasury : nat;
  configuration : ReserveConfiguration;
};

type ReserveConfiguration = record {
  ltv: nat16;
  liquidation_threshold: nat16;
  liquidation_bonus: nat16;
  active: bool;
  frozen: bool;
  borrowing_enabled: bool;
  paused: bool;
  borrow_cap: nat64;
  supply_cap: nat64;
  liquidation_protocol_fee: nat16;
};

type UserData = record {
   net_worth: opt nat;
    net_apy: opt float64;
    health_factor: opt float64;
     supply: opt vec record { text; nat };
    borrow: opt vec record { text; nat };
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type ExecuteSupplyParams  = record {
  asset: text;
  amount: nat;
  on_behalf_of : text;
  referral_code: nat16;
};

service : () -> {
  get_asset_data : () -> (ReserveData) query;
  new_canister : () -> (principal);
  
  initialize_reserve: () -> ();
  deposit: (text, nat64, text, nat16) -> (variant { Ok: null; Err: text });
  borrow: (text, nat64, text, text, nat) -> (Result);
  supply : (ExecuteSupplyParams) -> (Result_1);
  get_reserve_data: (text) -> (variant { Ok: ReserveData; Err: text}) query;
  get_user_data: (text) -> (variant {Ok: UserData; Err: text}) query;
  get_all_assets: () -> (vec text) query;
  "initialize_reserve_list": (vec record { text; principal }) -> (Result);
};
