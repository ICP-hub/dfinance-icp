type CachedPrice = record { price : nat };
type Error = variant {
  NormalizedSupply;
  ConversionErrorToU128;
  NoDebtToRepay;
  NoCanisterIdFound;
  ErrorBurnDebtTokens;
  SupplyCapExceeded;
  InvalidAmount;
  AmountTooMuch;
  ErrorMintDebtTokens;
  NoUserReserveDataFound;
  ExchangeRateError;
  ErrorMintDTokens;
  InvalidAssetLength;
  InvalidCanister;
  LTVGreaterThanThreshold;
  ReserveInactive;
  WithdrawMoreThanSupply;
  ErrorMintTokens;
  BorrowingNotEnabled;
  InvalidPrincipal;
  NoReserveDataFound;
  LowWalletBalance;
  InvalidBurnAmount;
  ErrorPriceCache;
  InvalidUser;
  EmptyAsset;
  MaxAmount;
  ErrorParsingPrincipal;
  ReserveFrozen;
  LessRewardAmount;
  ErrorBurnDTokens;
  ConversionErrorFromTextToPrincipal;
  BorrowCapExceeded;
  HealthFactorLess;
  UnauthorizedAccess;
  ReservePaused;
  ErrorBurnTokens;
  RepayMoreThanDebt;
  InvalidMintAmount;
  UserNotFound;
  CalculateUserAccountDataError;
  NormalizedDebt;
};
type PriceCache = record { cache : vec record { text; CachedPrice } };
type ReserveConfiguration = record {
  ltv : nat;
  liquidation_protocol_fee : nat;
  active : bool;
  supply_cap : nat;
  borrow_cap : nat;
  reserve_factor : nat;
  borrowing_enabled : bool;
  frozen : bool;
  liquidation_bonus : nat;
  liquidation_threshold : nat;
  paused : bool;
};
type ReserveData = record {
  id : nat16;
  asset_name : opt text;
  userlist : opt vec record { text; bool };
  asset_borrow : nat;
  can_be_collateral : opt bool;
  debt_token_canister : opt text;
  last_update_timestamp : nat64;
  liquidity_index : nat;
  d_token_canister : opt text;
  asset_supply : nat;
  current_liquidity_rate : nat;
  borrow_rate : nat;
  configuration : ReserveConfiguration;
  accure_to_platform : nat;
  debt_index : nat;
  total_borrowed : nat;
  total_supply : nat;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_10 = variant { Ok : record { nat; nat }; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type Result_3 = variant { Ok : principal; Err : text };
type Result_4 = variant { Ok : PriceCache; Err : text };
type Result_5 = variant { Ok : record { nat; nat64 }; Err : text };
type Result_6 = variant { Ok : ReserveData; Err : text };
type Result_7 = variant {
  Ok : record { nat; nat; nat; nat; nat; nat; bool };
  Err : Error;
};
type Result_8 = variant { Ok : UserData; Err : text };
type Result_9 = variant { Ok : text; Err : text };
type UserData = record {
  ltv : opt nat;
  available_borrow : opt nat;
  net_apy : opt nat;
  reserves : opt vec record { text; UserReserveData };
  health_factor : opt nat;
  total_collateral : opt nat;
  total_debt : opt nat;
  user_id : opt text;
  liquidation_threshold : opt nat;
  max_ltv : opt nat;
  net_worth : opt nat;
};
type UserReserveData = record {
  supply_rate : nat;
  asset_price_when_supplied : nat;
  principal_stable_debt : nat64;
  asset_borrow : nat;
  last_update_timestamp : nat64;
  d_token_balance : nat;
  is_collateral : bool;
  asset_price_when_borrowed : nat;
  liquidity_index : nat;
  faucet_limit : nat;
  variable_borrow_index : nat;
  reserve : text;
  asset_supply : nat;
  state : UserState;
  faucet_usage : nat;
  borrow_rate : nat;
  debt_token_blance : nat;
  is_using_as_collateral_or_borrow : bool;
  is_borrowed : bool;
};
type UserState = record { adjusted_balance : nat; index : nat };
service : () -> {
  borrow : (text, nat64) -> (Result);
  create_multiple_canisters : () -> (vec principal);
  faucet : (text, nat) -> (Result_1);
  get_all_assets : () -> (vec text) query;
  get_all_users : () -> (vec record { principal; UserData }) query;
  get_asset_debt : (text, opt text) -> (Result_2) query;
  get_asset_principal : (text) -> (Result_3) query;
  get_asset_supply : (text, opt text) -> (Result_2) query;
  get_balance : (principal, principal) -> (nat) query;
  get_cached_exchange_rate : (text) -> (Result_4) query;
  get_exchange_rates : (text, opt text, nat) -> (Result_5);
  get_reserve_data : (text) -> (Result_6) query;
  get_user_account_data : (opt text) -> (Result_7);
  get_user_data : (text) -> (Result_8) query;
  initialize_reserve : () -> ();
  queary_reserve_price : () -> (vec PriceCache) query;
  register_user : (principal) -> (Result_9);
  repay : (text, nat, opt text) -> (Result);
  reset_faucet_usage : (principal) -> (Result);
  schedule_midnight_task : () -> () query;
  toggle_collateral : (text, nat, nat) -> ();
  update_balance : (principal, principal, nat) -> (Result_2);
  update_reserves_price : () -> ();
  user_normalized_debt : (ReserveData) -> (Result_2) query;
  user_normalized_supply : (ReserveData) -> (Result_2) query;
  user_position : (text) -> (Result_10) query;
  withdraw : (text, nat, opt text, bool) -> (Result);
}
