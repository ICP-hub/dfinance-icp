type Account = record { owner : principal; subaccount : opt blob };
type Allowance = record { allowance : nat; expires_at : opt nat64 };
type AllowanceArgs = record { account : Account; spender : Account };
type Result = variant { Ok : Allowance; Err : text };
type Result_1 = variant { Ok : TransferFromResult; Err : text };
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromResult = variant { Ok : nat; Err : TransferFromError };
service : {
  check_for_allowance : (AllowanceArgs, text) -> (Result);
  check_username : (text) -> (bool) query;
  provide_liquidity : (text, nat, principal) -> (Result_1);
  transfer_bucks : (Account, Account, nat, text) -> (Result_1);
}
